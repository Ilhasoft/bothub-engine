# Generated by Django 2.2.12 on 2020-07-29 15:20

import bothub.authentication.models
import django.core.validators
from django.db import migrations, models
from django.core.management.color import no_style
from django.db import connection
import django.db.models.deletion
import re


def noop(apps, schema_editor):  # pragma: no cover
    pass


def migrate_users(apps, schema_editor):  # pragma: no cover
    User = apps.get_model("authentication", "User")
    RepositoryOwner = apps.get_model("authentication", "RepositoryOwner")
    RepositoryAuthorization = apps.get_model(
        "authentication", "RepositoryAuthorization"
    )

    RepositoryOwner.objects.bulk_create(
        (
            RepositoryOwner(
                pk=user.pk,
                name=user.name,
                locale=user.locale,
                nickname=user.nickname,
                joined_at=user.joined_at,
            )
            for user in User.objects.all()
        )
    )

    sequence_sql = connection.ops.sequence_reset_sql(no_style(), [RepositoryOwner])
    with connection.cursor() as cursor:
        cursor.execute(sequence_sql[0])

    for auth in RepositoryAuthorization.objects.all():
        if auth.is_owner:
            auth.role = RepositoryAuthorization.ROLE_ADMIN
            auth.save(update_fields=["role"])


class Migration(migrations.Migration):

    dependencies = [("authentication", "0005_auto_20180620_2059")]

    operations = [
        migrations.CreateModel(
            name="RepositoryOwner",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="User's name.", max_length=32, verbose_name="name"
                    ),
                ),
                (
                    "locale",
                    models.CharField(
                        blank=True,
                        help_text="User's locale.",
                        max_length=48,
                        verbose_name="locale",
                    ),
                ),
                (
                    "nickname",
                    models.CharField(
                        help_text="User's or Organization nickname, using letters, numbers, underscores and hyphens without spaces.",
                        max_length=16,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                re.compile("^[-a-zA-Z0-9_]+\\Z"),
                                "Enter a valid 'nickname' consisting of letters, numbers, underscores or hyphens.",
                                "invalid",
                            ),
                            bothub.authentication.models.validate_user_nickname_value,
                        ],
                        verbose_name="nickname",
                    ),
                ),
                (
                    "biography",
                    models.TextField(blank=True, null=True, verbose_name="biography"),
                ),
                (
                    "joined_at",
                    models.DateField(auto_now_add=True, verbose_name="joined at"),
                ),
            ],
            options={"verbose_name": "repository organization"},
        ),
        migrations.RenameField(
            model_name="user", old_name="id", new_name="repository_owner"
        ),
        migrations.RunPython(migrate_users, noop),
        migrations.RemoveField(model_name="user", name="joined_at"),
        migrations.RemoveField(model_name="user", name="locale"),
        migrations.RemoveField(model_name="user", name="name"),
        migrations.RemoveField(model_name="user", name="nickname"),
        migrations.AlterField(
            model_name="user",
            name="repository_owner",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE,
                parent_link=True,
                primary_key=True,
                related_name="user_owner",
                serialize=False,
                to="authentication.RepositoryOwner",
            ),
        ),
    ]
