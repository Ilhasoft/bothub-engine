# Generated by Django 2.2.12 on 2020-08-31 18:24

from django.db import migrations, transaction
from django.db.models import Q, F

BATCH_SIZE = 5000


def reverse(apps, schema_editor):  # pragma: no cover
    pass


def fix_translations_rv_language_fields(apps, schema_editor):  # pragma: no cover
    RepositoryVersionLanguage = apps.get_model("common", "RepositoryVersionLanguage")
    RepositoryTranslatedExample = apps.get_model(
        "common", "RepositoryTranslatedExample"
    )

    def get_version_language(repository_version, language):
        version_language, created = RepositoryVersionLanguage.objects.get_or_create(
            repository_version=repository_version, language=language
        )
        return version_language

    translations = RepositoryTranslatedExample.objects.exclude(Q(repository_version_language__language=F('language')))

    num_updated = 0
    max_id = -1
    while True:
        batch = list(translations.filter(id__gt=max_id).order_by("id")[:BATCH_SIZE])
        if not batch:
            break

        with transaction.atomic():
            for translation in batch:
                repository_version_language = get_version_language(
                    translation.original_example.repository_version_language.repository_version,
                    translation.language,
                )
                translation.repository_version_language = repository_version_language
                translation.save(update_fields=["repository_version_language"])

        num_updated += len(batch)
        print(f" > Updated {num_updated} translations")

        max_id = batch[-1].id


def apply_manual():  # pragma: no cover
    from django.apps import apps

    fix_translations_rv_language_fields(apps, None)


class Migration(migrations.Migration):

    dependencies = [("common", "0087_repository_allow_search_examples")]

    operations = [migrations.RunPython(fix_translations_rv_language_fields, reverse)]
