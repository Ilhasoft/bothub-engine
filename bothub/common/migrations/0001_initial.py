# Generated by Django 2.1.11 on 2019-12-09 19:10

import bothub.common.languages
import bothub.common.models
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import re
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Repository',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='UUID')),
                ('name', models.CharField(help_text='Repository display name', max_length=64, verbose_name='name')),
                ('slug', models.SlugField(help_text='Easy way to found and share repositories', max_length=32, verbose_name='slug')),
                ('language', models.CharField(help_text="Repository's examples language. The examples can be translated to other languages.", max_length=5, validators=[bothub.common.languages.validate_language], verbose_name='language')),
                ('algorithm', models.CharField(choices=[('statistical_model', 'Statistical Model'), ('neural_network_internal', 'Neural Network with internal vocabulary'), ('neural_network_external', 'Neural Network with external vocabulary (BETA)')], default='statistical_model', max_length=24, verbose_name='algorithm')),
                ('use_competing_intents', models.BooleanField(default=False, help_text='When using competing intents the confidence of the prediction is distributed in all the intents.', verbose_name='Use competing intents')),
                ('use_name_entities', models.BooleanField(default=False, help_text='When enabling name entities you will receive name of people, companies and places as results of your predictions.', verbose_name='Use name entities')),
                ('use_analyze_char', models.BooleanField(default=False, help_text='When selected, the algorithm will learn the patterns of individual characters instead of whole words. This approach works better for some languages.', verbose_name='Use analyze char')),
                ('description', models.TextField(blank=True, help_text='Tell what your bot do!', verbose_name='description')),
                ('is_private', models.BooleanField(default=False, help_text='Your repository can be private, only you can see and use, or can be public and all community can see and use.', verbose_name='private')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('nlp_server', models.URLField(blank=True, null=True, verbose_name='Base URL NLP')),
            ],
            options={
                'verbose_name': 'repository',
                'verbose_name_plural': 'repositories',
            },
        ),
        migrations.CreateModel(
            name='RepositoryAuthorization',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='UUID')),
                ('role', models.PositiveIntegerField(choices=[(0, 'not set'), (1, 'user'), (2, 'contributor'), (3, 'admin')], default=0, verbose_name='role')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('repository', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='authorizations', to='common.Repository')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'repository authorization',
                'verbose_name_plural': 'repository authorizations',
            },
        ),
        migrations.CreateModel(
            name='RepositoryCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32, verbose_name='name')),
                ('icon', models.CharField(default='botinho', max_length=16, verbose_name='icon')),
            ],
            options={
                'verbose_name': 'repository category',
                'verbose_name_plural': 'repository categories',
            },
        ),
        migrations.CreateModel(
            name='RepositoryEntity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(help_text='Entity name', max_length=64, validators=[django.core.validators.RegexValidator(re.compile('^[-a-z0-9_]+\\Z'), 'Enter a valid value consisting of lowercase letters, numbers, underscores or hyphens.', 'invalid')], verbose_name='entity')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
            ],
        ),
        migrations.CreateModel(
            name='RepositoryEntityLabel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(blank=True, max_length=64, validators=[django.core.validators.RegexValidator(re.compile('^[-a-z0-9_]+\\Z'), 'Enter a valid value consisting of lowercase letters, numbers, underscores or hyphens.', 'invalid'), bothub.common.models.can_t_be_other], verbose_name='label')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('repository', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='labels', to='common.Repository')),
            ],
        ),
        migrations.CreateModel(
            name='RepositoryEvaluate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(help_text='Evaluate test text', verbose_name='text')),
                ('intent', models.CharField(default='no_intent', help_text='Evaluate intent reference', max_length=64, validators=[django.core.validators.RegexValidator(re.compile('^[-a-z0-9_]+\\Z'), 'Enter a valid value consisting of lowercase letters, numbers, underscores or hyphens.', 'invalid')], verbose_name='intent')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
            ],
            options={
                'verbose_name': 'repository evaluate test',
                'verbose_name_plural': 'repository evaluate tests',
                'db_table': 'common_repository_evaluate',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='RepositoryEvaluateEntity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start', models.PositiveIntegerField(help_text='Start index of entity value in example text', verbose_name='start')),
                ('end', models.PositiveIntegerField(help_text='End index of entity value in example text', verbose_name='end')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('entity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='common.RepositoryEntity')),
                ('repository_evaluate', models.ForeignKey(editable=False, help_text='evaluate object', on_delete=django.db.models.deletion.CASCADE, related_name='entities', to='common.RepositoryEvaluate')),
            ],
            options={
                'db_table': 'common_repository_evaluate_entity',
            },
        ),
        migrations.CreateModel(
            name='RepositoryEvaluateResult',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('matrix_chart', models.URLField(editable=False, verbose_name='Intent Confusion Matrix Chart')),
                ('confidence_chart', models.URLField(editable=False, verbose_name='Intent Prediction Confidence Distribution')),
                ('log', models.TextField(blank=True, editable=False, verbose_name='Evaluate Log')),
                ('version', models.IntegerField(default=0, editable=False, verbose_name='Version')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
            ],
            options={
                'verbose_name': 'evaluate results',
                'verbose_name_plural': 'evaluate results',
                'db_table': 'common_repository_evaluate_result',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='RepositoryEvaluateResultEntity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entity', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='entity', to='common.RepositoryEntity')),
                ('evaluate_result', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='evaluate_result_entity', to='common.RepositoryEvaluateResult')),
            ],
            options={
                'db_table': 'common_repository_evaluate_result_entity',
            },
        ),
        migrations.CreateModel(
            name='RepositoryEvaluateResultIntent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('intent', models.CharField(help_text='Evaluate intent reference', max_length=64, validators=[django.core.validators.RegexValidator(re.compile('^[-a-z0-9_]+\\Z'), 'Enter a valid value consisting of lowercase letters, numbers, underscores or hyphens.', 'invalid')], verbose_name='intent')),
                ('evaluate_result', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='evaluate_result_intent', to='common.RepositoryEvaluateResult')),
            ],
            options={
                'db_table': 'common_repository_evaluate_result_intent',
            },
        ),
        migrations.CreateModel(
            name='RepositoryEvaluateResultScore',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('precision', models.DecimalField(decimal_places=2, max_digits=3, null=True)),
                ('f1_score', models.DecimalField(decimal_places=2, max_digits=3, null=True)),
                ('accuracy', models.DecimalField(decimal_places=2, max_digits=3, null=True)),
                ('recall', models.DecimalField(decimal_places=2, max_digits=3, null=True)),
                ('support', models.IntegerField(null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
            ],
            options={
                'db_table': 'common_repository_evaluate_result_score',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='RepositoryExample',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(help_text='Example text', verbose_name='text')),
                ('intent', models.CharField(default='no_intent', help_text='Example intent reference', max_length=64, validators=[django.core.validators.RegexValidator(re.compile('^[-a-z0-9_]+\\Z'), 'Enter a valid value consisting of lowercase letters, numbers, underscores or hyphens.', 'invalid')], verbose_name='intent')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('last_update', models.DateTimeField(verbose_name='last update')),
            ],
            options={
                'verbose_name': 'repository example',
                'verbose_name_plural': 'repository examples',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='RepositoryExampleEntity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start', models.PositiveIntegerField(help_text='Start index of entity value in example text', verbose_name='start')),
                ('end', models.PositiveIntegerField(help_text='End index of entity value in example text', verbose_name='end')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('entity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='common.RepositoryEntity')),
                ('repository_example', models.ForeignKey(editable=False, help_text='Example object', on_delete=django.db.models.deletion.CASCADE, related_name='entities', to='common.RepositoryExample')),
            ],
            options={
                'verbose_name': 'repository example entity',
                'verbose_name_plural': 'repository example entities',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RepositoryTranslatedExample',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('language', models.CharField(help_text='Translation language', max_length=5, validators=[bothub.common.languages.validate_language], verbose_name='language')),
                ('text', models.TextField(help_text='Translation text', verbose_name='text')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('original_example', models.ForeignKey(editable=False, help_text='Example object', on_delete=django.db.models.deletion.CASCADE, related_name='translations', to='common.RepositoryExample')),
            ],
            options={
                'verbose_name': 'repository translated example',
                'verbose_name_plural': 'repository translated examples',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='RepositoryTranslatedExampleEntity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start', models.PositiveIntegerField(help_text='Start index of entity value in example text', verbose_name='start')),
                ('end', models.PositiveIntegerField(help_text='End index of entity value in example text', verbose_name='end')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('entity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='common.RepositoryEntity')),
                ('repository_translated_example', models.ForeignKey(editable=False, help_text='Translated example object', on_delete=django.db.models.deletion.CASCADE, related_name='entities', to='common.RepositoryTranslatedExample')),
            ],
            options={
                'verbose_name': 'repository example entity',
                'verbose_name_plural': 'repository example entities',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RepositoryVersion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=40)),
                ('last_update', models.DateTimeField(auto_now_add=True, verbose_name='last update')),
                ('is_default', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('repository', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='versions', to='common.Repository')),
            ],
            options={
                'verbose_name': 'repository version',
            },
        ),
        migrations.CreateModel(
            name='RepositoryVersionLanguage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('language', models.CharField(max_length=5, validators=[bothub.common.languages.validate_language], verbose_name='language')),
                ('bot_data', models.TextField(blank=True, verbose_name='bot data')),
                ('training_started_at', models.DateTimeField(blank=True, null=True, verbose_name='training started at')),
                ('training_end_at', models.DateTimeField(blank=True, null=True, verbose_name='trained at')),
                ('failed_at', models.DateTimeField(blank=True, null=True, verbose_name='failed at')),
                ('use_analyze_char', models.BooleanField(default=False)),
                ('use_name_entities', models.BooleanField(default=False)),
                ('use_competing_intents', models.BooleanField(default=False)),
                ('algorithm', models.CharField(choices=[('statistical_model', 'Statistical Model'), ('neural_network_internal', 'Neural Network with internal vocabulary'), ('neural_network_external', 'Neural Network with external vocabulary (BETA)')], default='statistical_model', max_length=24, verbose_name='algorithm')),
                ('training_log', models.TextField(blank=True, editable=False, verbose_name='training log')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('last_update', models.DateTimeField(auto_now_add=True, verbose_name='last update')),
                ('total_training_end', models.IntegerField(default=0, verbose_name='total training end')),
                ('repository_version', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='common.RepositoryVersion')),
            ],
            options={
                'verbose_name': 'repository version language',
                'verbose_name_plural': 'repository version languages',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='RepositoryVote',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('repository', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='votes', to='common.Repository')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='repository_votes', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'repository vote',
                'verbose_name_plural': 'repository votes',
            },
        ),
        migrations.CreateModel(
            name='RequestRepositoryAuthorization',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=250, verbose_name='text')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('repository', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='requests', to='common.Repository')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='requests', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='repositorytranslatedexample',
            name='repository_version_language',
            field=models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='translated_added', to='common.RepositoryVersionLanguage'),
        ),
        migrations.AddField(
            model_name='repositoryexample',
            name='deleted_in',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='deleted', to='common.RepositoryVersionLanguage'),
        ),
        migrations.AddField(
            model_name='repositoryexample',
            name='repository_version_language',
            field=models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='added', to='common.RepositoryVersionLanguage'),
        ),
        migrations.AddField(
            model_name='repositoryevaluateresultintent',
            name='score',
            field=models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='evaluation_intenties_score', to='common.RepositoryEvaluateResultScore'),
        ),
        migrations.AddField(
            model_name='repositoryevaluateresultentity',
            name='score',
            field=models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='evaluation_entities_score', to='common.RepositoryEvaluateResultScore'),
        ),
        migrations.AddField(
            model_name='repositoryevaluateresult',
            name='entity_results',
            field=models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='entity_results', to='common.RepositoryEvaluateResultScore'),
        ),
        migrations.AddField(
            model_name='repositoryevaluateresult',
            name='intent_results',
            field=models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='intent_results', to='common.RepositoryEvaluateResultScore'),
        ),
        migrations.AddField(
            model_name='repositoryevaluateresult',
            name='repository_version_language',
            field=models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='results', to='common.RepositoryVersionLanguage'),
        ),
        migrations.AddField(
            model_name='repositoryevaluate',
            name='deleted_in',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='deleted_evaluate', to='common.RepositoryVersionLanguage'),
        ),
        migrations.AddField(
            model_name='repositoryevaluate',
            name='repository_version_language',
            field=models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='added_evaluate', to='common.RepositoryVersionLanguage'),
        ),
        migrations.AddField(
            model_name='repositoryentity',
            name='label',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='entities', to='common.RepositoryEntityLabel'),
        ),
        migrations.AddField(
            model_name='repositoryentity',
            name='repository',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='entities', to='common.Repository'),
        ),
        migrations.AddField(
            model_name='repository',
            name='categories',
            field=models.ManyToManyField(help_text='Categories for approaching repositories with the same purpose', to='common.RepositoryCategory'),
        ),
        migrations.AddField(
            model_name='repository',
            name='owner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='repositories', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterUniqueTogether(
            name='requestrepositoryauthorization',
            unique_together={('user', 'repository')},
        ),
        migrations.AlterUniqueTogether(
            name='repositoryvote',
            unique_together={('user', 'repository')},
        ),
        migrations.AlterUniqueTogether(
            name='repositorytranslatedexample',
            unique_together={('original_example', 'language')},
        ),
        migrations.AlterUniqueTogether(
            name='repositoryentitylabel',
            unique_together={('repository', 'value')},
        ),
        migrations.AlterUniqueTogether(
            name='repositoryentity',
            unique_together={('repository', 'value')},
        ),
        migrations.AlterUniqueTogether(
            name='repositoryauthorization',
            unique_together={('user', 'repository')},
        ),
        migrations.AlterUniqueTogether(
            name='repository',
            unique_together={('owner', 'slug')},
        ),
    ]
